import json
from typing import Any, Dict, Optional

from httpx import Headers, Response, Request

MAX_CONTENT = 200


class ApiException(Exception):
    """Base class"""


class UnexpectedResponse(ApiException):
    def __init__(self, response: Response, request: Request) -> None:
        self.response = response
        self.request = request

    @property
    def status_code(self) -> int:
        return self.response.status_code

    @property
    def reason_phrase(self) -> str:
        return self.response.reason_phrase

    @property
    def content(self) -> bytes:
        return self.response.content

    @property
    def headers(self) -> Headers:
        return self.response.headers

    def __str__(self) -> str:
        status_code_str = f"{self.status_code}" if self.status_code is not None else ""
        if self.reason_phrase == "" and self.status_code is not None:
            reason_phrase_str = "(Unrecognized Status Code)"
        else:
            reason_phrase_str = f"({self.reason_phrase})"
        status_str = f"{status_code_str} {reason_phrase_str}".strip()
        short_content = self.content if len(self.content) <= MAX_CONTENT else self.content[: MAX_CONTENT - 3] + b" ..."
        raw_content_str = f"Raw response content:\n{short_content!r}"
        return f"Unexpected Response: {status_str}\n{raw_content_str}"

    def structured(self) -> Dict[str, Any]:
        return json.loads(self.content)  # type: ignore


class ResponseHandlingException(ApiException):
    def __init__(self, source: Exception):
        self.source = source
