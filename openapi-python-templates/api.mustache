# flake8: noqa E501
import json
from typing import Any, Dict, IO, List, TYPE_CHECKING, Optional, Callable, Union, Mapping, Sequence
from datetime import date, datetime, timedelta
from uuid import UUID

from fastapi.encoders import jsonable_encoder

from @IMPORT_NAME@ import models as m

if TYPE_CHECKING:
    from @IMPORT_NAME@.api_client import ApiClient


{{#operations}}
class Async{{classname}}:
    def __init__(self, api_client: "ApiClient"):
        self.api_client = api_client

{{#operation}}
    async def {{operationId}}(self, {{#allParams}}{{paramName}}: {{^required}}{{^defaultValue}}Optional[{{/defaultValue}}{{/required}}{{>_dataTypeApi}}{{^required}}{{^defaultValue}}]{{/defaultValue}} = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {{>_returnType}}:
{{#notes}}
        """
        {{{notes}}}
        """
{{/notes}}
{{#pathParams.0}}
        path_params = {
{{#pathParams}}
{{#required}}
            "{{baseName}}": m.as_str({{paramName}}){{#hasMore}},{{/hasMore}}
{{/required}}
{{/pathParams}}
        }
{{#pathParams}}
{{^required}}
        if {{paramName}} is not None:
            path_params["{{baseName}}"] = m.as_str({{paramName}})
{{/required}}
{{/pathParams}}

{{/pathParams.0}}
{{#queryParams.0}}
        query_params: Mapping[str, Union[str, Sequence[str]]] = {}
{{#queryParams}}
{{#required}}
        query_params = {**query_params, **m.as_query_params("{{baseName}}", {{paramName}})}
{{/required}}
{{/queryParams}}
{{#queryParams}}
{{^required}}
        if {{paramName}} is not None:
            query_params = {**query_params, **m.as_query_params("{{baseName}}", {{paramName}})}
{{/required}}
{{/queryParams}}

{{/queryParams.0}}
{{#headerParams.0}}
        headers = {
{{#headerParams}}
{{#required}}
            "{{baseName}}": m.as_str({{paramName}})
{{/required}}
{{/headerParams}}
        }
{{#headerParams}}
{{^required}}
        if {{paramName}} is not None:
            headers["{{baseName}}"] = m.as_str({{paramName}})
{{/required}}
{{/headerParams}}

{{/headerParams.0}}
{{#cookieParams.0}}
        cookies = {
{{#cookieParams}}
{{#required}}
            "{{baseName}}": m.as_str({{paramName}})
{{/required}}
{{/cookieParams}}
        }
{{#cookieParams}}
{{^required}}
        if {{paramName}} is not None:
            cookies["{{baseName}}"] = m.as_str({{paramName}})
{{/required}}
{{/cookieParams}}

{{/cookieParams.0}}
{{#formParams.0}}
        files: Dict[str, Union[IO[str], IO[bytes], str, bytes]] = {}  # noqa F841
        data: Dict[str, Any] = {}  # noqa F841
{{#formParams}}
{{#required}}
        {{#isFile}}files{{/isFile}}{{^isFile}}data{{/isFile}}["{{baseName}}"] = {{paramName}}
{{/required}}
{{/formParams}}
{{#formParams}}
{{^required}}
        if {{paramName}} is not None:
            {{#isFile}}files{{/isFile}}{{^isFile}}data{{/isFile}}["{{baseName}}"] = {{paramName}}
{{/required}}
{{/formParams}}

{{/formParams.0}}
{{#bodyParam}}
{{^isBinary}}
        {{paramName}} = jsonable_encoder({{paramName}})
{{/isBinary}}
{{/bodyParam}}
        return await self.api_client.request(
            type_={{>_returnType}},
            method="{{httpMethod}}",
            url="{{{path}}}",
            {{#pathParams.0}}path_params=path_params,{{/pathParams.0}}
            {{#queryParams.0}}params=query_params,{{/queryParams.0}}
            {{#headerParams.0}}headers=headers,{{/headerParams.0}}
            {{#cookieParams.0}}cookies=cookies,{{/cookieParams.0}}
            {{#formParams.0}}data=data,
            files=files{{^isMultipart}} or None{{/isMultipart}}{{/formParams.0}}
            {{#bodyParam}}{{#isBinary}}content{{/isBinary}}{{^isBinary}}json{{/isBinary}}={{paramName}}{{/bodyParam}}
        )

{{/operation}}
{{/operations}}

{{#operations}}
class Sync{{classname}}:
    def __init__(self, api_client: "ApiClient"):
        self.api_client = api_client

{{#operation}}
    def {{operationId}}(self, {{#allParams}}{{paramName}}: {{^required}}{{^defaultValue}}Optional[{{/defaultValue}}{{/required}}{{>_dataTypeApi}}{{^required}}{{^defaultValue}}]{{/defaultValue}} = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {{>_returnType}}:
{{#notes}}
        """
        {{{notes}}}
        """
{{/notes}}
{{#pathParams.0}}
        path_params = {
{{#pathParams}}
{{#required}}
            "{{baseName}}": m.as_str({{paramName}}){{#hasMore}},{{/hasMore}}
{{/required}}
{{/pathParams}}
        }
{{#pathParams}}
{{^required}}
        if {{paramName}} is not None:
            path_params["{{baseName}}"] = m.as_str({{paramName}})
{{/required}}
{{/pathParams}}

{{/pathParams.0}}
{{#queryParams.0}}
        query_params: Mapping[str, Union[str, Sequence[str]]] = {}
{{#queryParams}}
{{#required}}
        query_params = {**query_params, **m.as_query_params("{{baseName}}", {{paramName}})}
{{/required}}
{{/queryParams}}
{{#queryParams}}
{{^required}}
        if {{paramName}} is not None:
            query_params = {**query_params, **m.as_query_params("{{baseName}}", {{paramName}})}
{{/required}}
{{/queryParams}}

{{/queryParams.0}}
{{#headerParams.0}}
        headers = {
{{#headerParams}}
{{#required}}
            "{{baseName}}": m.as_str({{paramName}})
{{/required}}
{{/headerParams}}
        }
{{#headerParams}}
{{^required}}
        if {{paramName}} is not None:
            headers["{{baseName}}"] = m.as_str({{paramName}})
{{/required}}
{{/headerParams}}

{{/headerParams.0}}
{{#cookieParams.0}}
        cookies = {
{{#cookieParams}}
{{#required}}
            "{{baseName}}": m.as_str({{paramName}})
{{/required}}
{{/cookieParams}}
        }
{{#cookieParams}}
{{^required}}
        if {{paramName}} is not None:
            cookies["{{baseName}}"] = m.as_str({{paramName}})
{{/required}}
{{/cookieParams}}

{{/cookieParams.0}}
{{#formParams.0}}
        files: Dict[str, Union[IO[str], IO[bytes], str, bytes]] = {}  # noqa F841
        data: Dict[str, Any] = {}  # noqa F841
{{#formParams}}
{{#required}}
        {{#isFile}}files{{/isFile}}{{^isFile}}data{{/isFile}}["{{baseName}}"] = {{paramName}}
{{/required}}
{{/formParams}}
{{#formParams}}
{{^required}}
        if {{paramName}} is not None:
            {{#isFile}}files{{/isFile}}{{^isFile}}data{{/isFile}}["{{baseName}}"] = {{paramName}}
{{/required}}
{{/formParams}}

{{/formParams.0}}
{{#bodyParam}}
{{^isBinary}}
        {{paramName}} = jsonable_encoder({{paramName}})
{{/isBinary}}
{{/bodyParam}}
        return self.api_client.request_sync(
            type_={{>_returnType}},
            method="{{httpMethod}}",
            url="{{{path}}}",
            {{#pathParams.0}}path_params=path_params,{{/pathParams.0}}
            {{#queryParams.0}}params=query_params,{{/queryParams.0}}
            {{#headerParams.0}}headers=headers,{{/headerParams.0}}
            {{#cookieParams.0}}cookies=cookies,{{/cookieParams.0}}
            {{#formParams.0}}data=data,
            files=files{{^isMultipart}} or None{{/isMultipart}}{{/formParams.0}}
            {{#bodyParam}}{{#isBinary}}content{{/isBinary}}{{^isBinary}}json{{/isBinary}}={{paramName}}{{/bodyParam}}
        )

{{/operation}}
{{/operations}}