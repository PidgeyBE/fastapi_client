import asyncio
import threading
import logging

from typing import Any, Awaitable, Callable, Dict, Generic, Optional, Type, TypeVar, overload, Union

from httpx import AsyncClient, Client, Request, Response
from pydantic import ValidationError, parse_obj_as
import json

logger = logging.getLogger(__name__)


{{#apiInfo}}{{#apis}}from @IMPORT_NAME@.api.{{classVarName}} import Async{{classname}}, Sync{{classname}}
{{/apis}}{{/apiInfo}}from @IMPORT_NAME@.exceptions import ResponseHandlingException, UnexpectedResponse

ClientT = TypeVar("ClientT", bound="ApiClient")


class AsyncApis(Generic[ClientT]):
    def __init__(self, client: ClientT):
        self.client = client
{{#apiInfo}}{{#apis}}
        self.{{classVarName}} = Async{{classname}}(self.client){{/apis}}{{/apiInfo}}


class SyncApis(Generic[ClientT]):
    def __init__(self, client: ClientT):
        self.client = client
{{#apiInfo}}{{#apis}}
        self.{{classVarName}} = Sync{{classname}}(self.client){{/apis}}{{/apiInfo}}


T = TypeVar("T")


class ApiClient:
    def __init__(self, host: Optional[str] = None, **kwargs: Any) -> None:
        self.host = host
        self._client_kwargs = kwargs
        self._async_client: Optional[AsyncClient] = None
        self._sync_client: Optional[Client] = None

    @overload
    async def request(
        self, *, type_: Type[T], method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> T:
        ...

    @overload
    async def request(
        self, *, type_: None, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> None:
        ...

    @overload
    async def request(
        self, *, type_: Any, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> Any:
        ...

    async def request(
        self, *, type_: Any, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> Any:
        request = self.construct_request(method=method, url=url, path_params=path_params, **kwargs)
        return await self.send(request, type_)

    @overload
    def request_sync(
        self, *, type_: Type[T], method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> T:
        ...

    @overload
    def request_sync(
        self, *, type_: None, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> None:
        ...

    @overload
    def request_sync(
        self, *, type_: Any, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> Any:
        ...

    def request_sync(
        self, *, type_: Any, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> Any:
        request = self.construct_request(method=method, url=url, path_params=path_params, **kwargs)
        return self.send_sync(request, type_)

    def construct_request(
        self, method: str, url: str, path_params: Optional[Dict[str, Any]] = None, **kwargs: Any
    ) -> Request:
        if path_params is None:
            path_params = {}
        url = (self.host or "") + url.format(**path_params)
        return Request(method, url, **kwargs)

    @overload
    async def send(self, request: Request, type_: Type[T]) -> T:
        ...

    @overload
    async def send(self, request: Request, type_: None) -> None:
        ...

    @overload
    async def send(self, request: Request, type_: Any) -> Any:
        ...

    async def send(self, request: Request, type_: Any) -> Any:
        response = await self.send_inner(request)
        return self.process_send_response(response, type_)

    @overload
    def send_sync(self, request: Request, type_: Type[T]) -> T:
        ...

    @overload
    def send_sync(self, request: Request, type_: None) -> None:
        ...

    @overload
    def send_sync(self, request: Request, type_: Any) -> Any:
        ...

    def send_sync(self, request: Request, type_: Any) -> Any:
        response = self.send_inner_sync(request)
        return self.process_send_response(response, type_)

    @overload
    def process_send_response(self, response: Response, type_: Type[T]) -> T:
        ...

    @overload
    def process_send_response(self, response: Response, type_: None) -> None:
        ...

    @overload
    def process_send_response(self, response: Response, type_: Any) -> Any:
        ...

    def process_send_response(self, response: Response, type_: Any) -> Any:
        if response.status_code in [200, 201]:
            if type_ is None:
                return None
            elif type_ == bytes or type_ == Any:
                return response.content
            elif type_ == str:
                return response.text
            else:
                try:
                    as_json = response.json()
                    return parse_obj_as(type_, as_json)
                except (ValidationError, json.decoder.JSONDecodeError) as e:
                    raise ResponseHandlingException(e)
        raise UnexpectedResponse.for_response(response)

    async def send_inner(self, request: Request) -> Response:
        if self._async_client is None:
            self._async_client = AsyncClient(**self._client_kwargs)
        try:
            response = await self._async_client.send(request)
        except Exception as e:
            logger.error(f"API request {request} failed because {type(e)}: {str(e)}")
            raise ResponseHandlingException(e)
        return response

    def send_inner_sync(self, request: Request) -> Response:
        if self._sync_client is None:
            self._sync_client = Client(**self._client_kwargs)
        try:
            response = self._sync_client.send(request)
        except Exception as e:
            logger.error(f"API request {request} failed because {type(e)}: {str(e)}")
            raise ResponseHandlingException(e)
        return response

    def __del__(self) -> None:
        if self._sync_client is not None:
            self._sync_client.close()
        if self._async_client is not None:
            asyncio.ensure_future(self._async_client.aclose())
