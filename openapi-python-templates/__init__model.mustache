import json
import urllib
from datetime import datetime, timezone
from humps import camelize
from pydantic import BaseModel, Field
from typing import Any, Dict, Mapping, Sequence, Union


def _get_timestamp_string(timestamp: datetime) -> str:
    utc = timestamp.astimezone(tz=timezone.utc)
    return utc.strftime("%Y%m%dT%H%M%S%f000")

def _as_str(value: Any) -> str:
    try:
        return json.dumps(value)
    except:
        return str(value)


def as_query_params(key: str, value: Any) -> Mapping[str, Union[str, Sequence[str]]]:
    if isinstance(value, CamelModel):
        return value.as_query_parameters(key)
    elif isinstance(value, list) or isinstance(value, tuple):
        return {key: [_as_str(item) for item in value]}
    elif isinstance(value, dict):
        return {f"{key}[{k}]": _as_str(v) for k, v in value.items()}
    elif isinstance(value, datetime):
        return {key: _get_timestamp_string(value)}
    else:
        return {key: _as_str(value)}


class CamelModel(BaseModel):
    """Convert snake_case names automatically to camelCase."""

    class Config:
        """Picked up by BaseModel baseclass."""

        alias_generator = camelize
        allow_population_by_field_name = True

    def as_query_parameters(self, param_name: str) -> Dict[str, str]:
        data = {param_name: self.dict()}
        parents = list()
        pairs = dict()

        def renderKey(parents):
            depth, outStr = 0, ''
            for x in parents:
                s = "[%s]" if depth > 0 or isinstance(x, int) else "%s"
                outStr += s % str(x)
                depth += 1
            return outStr

        def r_urlencode(data):
            if isinstance(data, list) or isinstance(data, tuple):
                for i in range(len(data)):
                    parents.append(i)
                    r_urlencode(data[i])
                    parents.pop()
            elif isinstance(data, dict):
                for key, value in data.items():
                    parents.append(key)
                    r_urlencode(value)
                    parents.pop()
            else:
                pairs[renderKey(parents)] = urllib.parse.quote_plus(_as_str(data))

            return pairs
        return r_urlencode(data)
